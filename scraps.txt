

class	ZWebSocketFrame_08	extends	WebSocketFrame
	{	//	Non-Control Frames
	const	opcodeContinuation	=0x00;const	opcodeText		=0x01;const	opcodeBinary		=0x02;
	const	opcodeReserved3		=0x03;const	opcodeReserved4		=0x04;const	opcodeReserved5		=0x05;
	const	opcodeReserved6		=0x06;const	opcodeReserved7		=0x07;
		//	Control	Frames
	const	opcodeClose		=0x08;const	opcodePing		=0x09;const	opcodePong		=0x0A;
	const	opcodeReservedB		=0x0B;const	opcodeReservedC		=0x0B;const	opcodeReservedD		=0x0D;
	const	opcodeReservedE		=0x0E;const	opcodeReservedF		=0x0F;
		//	Constructor
	public	function	__construct()
		{	
		}
	private function reset_frame_buffer()		{
		}
	private $websocket_frame_buffer=Array();

	public	function __get($name		)		{		}
	public	function __set($name,$value	)		{	}
	public	function	&augmentExtend(&$oParams,&$oParamsAugment)	//	Augment $oParams with any missing items
		{
		foreach(		$oParamsAugment as	$key=>$value)		if(!isset($oParams[$key]))$oParams[$key]=$value;
		return $oParams;
		}
		//	Default wrap/unwrap container array
	public	static		$wrap_oParams_defaults	=Array(	"FIN"			=>TRUE				,//	firstByte
								"RSV1"			=>FALSE				,
								"RSV2"			=>FALSE				,
								"RSV3"			=>FALSE				,
								"opcode"		=>WebSocketFrame_08::opcodeText	,
								"MASK"			=>FALSE				,//	secondByte
								"Payload_Data_length"	=>0				,
								"Masking_key"		=>NULL				,
								"Payload_Data"		=>NULL				,
								"WebSocket_frame"	=>""				);
	/*	Function	:	apply_masking_key()
	**	Parameters	:	(Array			)	$oParams
	**					(Buffer			)	"Payload_Data"	This is the actual application data being sent/received.
	**					(Buffer			)	"Masking_key"	4 random characters either from a
	**											received frame, or a frame being constructed
	**	Returns		:	(Buffer	)	The Data_Payload content with Mask_key (if any) applied
	**	Description	:	
	*/
	function		 apply_masking_key(&$oParams)
		{
		$oParamsDefault=Array("Payload_Data"=>NULL,"Masking_key"=>NULL	);
		WebSocketFrame_08::augmentExtend(	$oParams,$oParamsDefault);	//	Augment $oParams with defaults as needed.
		extract(				$oParams		);	//	extract $oParams into discrete variables.
		if($Masking_key==NULL||$Payload_Data==NULL)return $Payload_Data;
		$Result		= ''	;
		for(	$i	= 0	; $i < strlen(	$Payload_Data		); $i++)
			{	$j	= $i % 4;$Result.= chr(ord($Payload_Data[$i]) ^ ord($Masking_key[$j]))	; 	}
		return $this;
		}
	/*	Function	:	unwrap()
	**	Parameters	:	(Array			)	$oParams
	**					(Buffer		)	"WebSocket_frame"
	**	Returns		:	(WebSocketFrame_08	)	The Data_Payload content of the 
	**	Description	:	
	**
	*/
	function		 unwrap($oParams=Array())
		{
		//	Augment $oParams with defaults as needed, then extract to discrete variables.
		extract(WebSocketFrame_08::augmentExtend(	$oParams,WebSocketFrame_08::$wrap_oParams_defaults)		);
		//	First	Byte of the WebSocketFrame
		sscanf(ord($WebSocket_frame[0]),"%01b%01b%01b%01b%04b"	,$FIN,$RSV1,$RSV2,$RSV3,$opcode	);	// First  Byte
		//	Second	Byte of the WebSocketFrame
		sscanf(ord($WebSocket_frame[1]),"%01b%07b"		,$MASK,$Payload_Data_length	);	// Second Byte

		$WebSocket_frame_remaining=substr($WebSocket_frame,2);

		if	($Payload_Data_length<126)	$aPayload=Array($Payload_Data_length	,"C"				);
		elseif	($Payload_Data_length<0xFE00)	$aPayload=Array(126			,"n",$Payload_Data_length	);
		else	{				$aPayload=Array(127			,"I",$Payload_Data_length	);
			if(PHP_INT_SIZE<8)throw new OutOfRangeException("This PHP version does not support 64bit values!");	}
/*		
		switch(	$Payload_Data_length)
			{
		case	$Payload_Data_length<=125	:break	;
		case	$Payload_Data_length==126	:list($Payload_Data_length)	= unpack("nfirst", $WebSocket_frame_remaining)	;$WebSocket_frame_remaining=substr($WebSocket_frame_remaining,2);break;
		case	$Payload_Data_length==127	:list($Payload_Data_length)	= 0						;$WebSocket_frame_remaining=substr($WebSocket_frame_remaining,8);
			throw new OutOfRangeException("PHP does not yet support 64bit values!")					;break;

			}	//	End	Switch	$Payload_Data_length
*/

		if(	$MASK)
			{
			$Masking_key			= substr($WebSocket_frame_remaining,0,4	);
			$WebSocket_frame_remaining	= substr($WebSocket_frame_remaining,4	);
			}
		
		if(strlen($WebSocket_frame_remaining) != $Payload_Data_length)	throw new OutOfRangeException("PHP does not yet support 64bit values!");

		$Payload_Data				=$WebSocket_frame_remaining;
		if(	$MASK		)$Payload_Data	= apply_masking_key(compact($Payload_Data,$Masking_key));

		return $this;
		}//	End	Function	unwrap()
	/*	Function	:	wrap()
	**	Parameters	:	(Array		)	$oParams
	**					(Boolean	)	"FIN"		[TRUE	]	Is this the final frame in this message.
	**					(Number		)	"opcode"	[0x01	]	Type of message frame
	**					(Boolean	)	"MASK"		[FALSE	]	Employ a data mask to avoid interpretation 
	**												by other software intermediaries
	**					(Buffer		)	Payload_Data	[NULL	]	Whatever data your sending.
	**	Returns		:	(WebSocketFrame_08	)	The constructed frame.
	*/
	function		wrap(&$oParams		=Array())
		{	
		//	Augment $oParams with defaults as needed, then extract to discrete variables.
		extract(WebSocketFrame_08::augmentExtend(	$oParams,WebSocketFrame_08::$wrap_oParams_defaults)		);
		//	Calculate $Payload_Data_length encoding parameters
		$Payload_Data_length		=	strlen($Payload_Data							);


		if	($Payload_Data_length<126)	$aPayload=Array($Payload_Data_length	,"C"				);
		elseif	($Payload_Data_length<0xFE00)	$aPayload=Array(126			,"n",$Payload_Data_length	);
		else	{				$aPayload=Array(127			,"I",$Payload_Data_length	);
			if(PHP_INT_SIZE<8)throw new OutOfRangeException("This PHP version does not support 64bit values!");	}



		//	First	Byte of the WebSocketFrame
		$WebSocket_frame				 =pack("C",bindec(sprintf("%01b%01b%01b%01b%04b",$FIN	,$RSV1	,$RSV2	,$RSV3	,$opcode))	);

		//	Second	Byte of the WebSocketFrame
		$WebSocket_frame				.=pack("C",bindec(sprintf("%01b%07b"		,$MASK	,$aPayload[0])))			;
		//	Third	Byte of the WebSocketFrame ... $Payload_Data_length encoding.
		if(isset($aPayload[2]))$WebSocket_frame		.=pack($aPayload[1],$aPayload[2]				);
		//	Mask/Payload of the WebSocketFrame
		if($MASK===TRUE		)$Masking_key		 =$oParams["Masking_key"]=pack("N", rand(0, pow(255,4) - 1	));
		if($Masking_key		)$WebSocket_frame	.=$Masking_key							;
		if($Payload_Data	)$WebSocket_frame	.=$this->apply_masking_key(compact($Payload_Data,$Masking_key	));
		$oParams["WebSocket_frame"	]=$WebSocket_frame	;
		$oParams["Payload_Data_length"	]=$Payload_Data_length	;
		print "\nWebSocketFrames oParams=".print_r($oParams,TRUE);
		return $this;
		}//	End	Function	wrap()
}//	End	Class	WebSocket









/*define("INT64_DIVIDER", 0x7fffffff + 1);
function split2Int(&$upper, &$lower, $value){$lower = intval(	$value % 		INT64_DIVIDER)		;$upper = intval((	$value - $lower) /	INT64_DIVIDER)		;}
function bigInt2float($upper, $lower){	return $upper			*		INT64_DIVIDER + $lower	;	} */
//iconv_set_encoding("internal_encoding", "UTF-8");
//iconv_set_encoding("internal_output", "UTF-8");
//preg_split('/(?<!^)(?!$)/u', "hello world");
//	http://bayradio.com/kgo.m3u
//http://www.kgoam810.com/


















/*

class	WebSocket_08_frame
	{
	public	static	$oFrameDefinition=Array(	//	Byte One
						"_0"			=>Array(	"_0x01_FIN"			=>1	,	// Bit 1
											"_0x02_RSV1"			=>0	,	// Bit 2
											"_0x04_RSV2"			=>0	,	// Bit 3
											"_0x08_RSV3"			=>0	,	// Bit 4
											"_0xF0_opcode"			=>0	),	// Bit 5-7
							//	Byte Two
						"_1"			=>Array(	"_0x01_MASK"			=>0	,	// Bit 1
											"_0xFE_Payload_len"		=>0	),	// Bit 2-7
							//	[next,conditional 		(Payload_len	==126|127	)]
						"Payload_len_extended"	=>NULL	,							// Bits 16	when Payload_len==126
																	// Bits 64	when Payload_len==127
							//	[next conditional		(MASK		==TRUE		)]
						"Masking_key"		=>NULL	,							// Bits 32	Four random chars
							//	[next]
						"Payload_Data"		=>NULL	);
	public	function		blank()		{		}
	public	function		__construct()	{		}
	public	$oFrameDefault		=Array();
	public	$oFrameLocal		=Array();
	public	$oFrameNetwork		=Array();
	public	function __get($name)		{print "get $name";		}
	public	function __set($name,$value)		{print "set $name";		}
	}	//	class	WebSocket_08_frame

class	WebSocket_08_codec	extends WebSocket_codec
	{
	//	Non-Control Frames
	const	opcodeContinuation	=0x00;const	opcodeText		=0x01;const	opcodeBinary		=0x02;
	const	opcodeReserved3		=0x03;const	opcodeReserved4		=0x04;const	opcodeReserved5		=0x05;
	const	opcodeReserved6		=0x06;const	opcodeReserved7		=0x07;
	//	Control	Frames
	const	opcodeClose		=0x08;const	opcodePing		=0x09;const	opcodePong		=0x0A;
	const	opcodeReservedB		=0x0B;const	opcodeReservedC		=0x0B;const	opcodeReservedD		=0x0D;
	const	opcodeReservedE		=0x0E;const	opcodeReservedF		=0x0F;
						//	These are class default parameters
	public	static	$oParamsDefaults	=Array(	//	Byte One
							"FIN"			=>1	,// Bit 1
							"RSV1"			=>0	,// Bit 2
							"RSV2"			=>0	,// Bit 3
							"RSV3"			=>0	,// Bit 4
							"opcode"		=>0	,// Bit 5-7
							//	Byte Two
							"MASK"			=>0	,// Bit 1
							"Payload_len"		=>0	,// Bit 2-7

							//	[next,conditional (Payload_len	==126|127	)]			
							"Payload_len_extended"	=>NULL	,// Bits 16	when Payload_len==126
											 // Bits 64	when Payload_len==127

							//	[next conditional (MASK		==TRUE		)]	
							"Masking_key"		=>NULL	,// Bits 32	Four random chars

							//	[conditional next]
							"Payload_Data"		=>NULL	);
//	public		
	private		$oParams		=Array()		;	// We hold our instance parameters here


	private		$io			=Array(	"Payload_Data"		=>""	,
							"WebSocket_frame"	=>""	);

	public	function	__construct(){}
	public	function	reset(&$oParams)	{	$oParams+=WebSocket_08_codec::$oParamsDefaults;	$this->oParams=&$oParams;	}
	function flipMask()
		{
		extract($this->oParams,EXTR_REFS);
		for($i=0;$i<strlen($Payload_Data);$i++)	{$j= $i % 4;$Payload_Data[$i]= chr(ord($Payload_Data[$i]) ^ ord($Masking_key[$j]))	;}
		}

//	"Payload_Data"	
	public	function	wrap(&$oParams)	{$this->reset($oParams);extract($this->oParams,EXTR_REFS);	
		$this->io["WebSocket_frame"]	=""				;		print "\nwrap oParams ".print_r($this->oParams,TRUE);
		$Payload_len			=strlen($Payload_Data)		;
		if	($Payload_len>0xfffe	){	$Payload_len_extended	=(double)	$this->flipByteOrder($Payload_len)	 ;$Payload_len	=0x7f;	}
		else if	($Payload_len>0x7d	){	$Payload_len_extended	=(int)		$this->flipByteOrder($Payload_len)&0xffff;$Payload_len	=0x7e;	};
		if	($MASK			){	$Masking_key		=$oParams["Masking_key"]=pack("N", rand(0, pow(255,4) - 1));$this->flipMask();	}
		$wfb	=	pack("C",($FIN|$RSV1<<1|$RSV2<<2|$RSV3<<3|$opcode<<4)		&0xFF	)	.
				pack("C",($MASK&($Payload_len&0x7f))				&0xFF	);
		if	($MASK			)$wfb.=pack("C4",$Masking_key);
		$wfb.=pack("C*",$iWritePayload);
		$this->io["WebSocket_frame"]==$wfb;
		print "\n wrap produced a WebSocket_frame result containing (".strlen($wfb).") bytes for Payload length ($iWritePayload)\n".$Payload_Data."\n===\n".
		print_r($this->oParams,TRUE)."\n===\n";
		}
//	WebSocket_frame
	public	function	unwrap(&$oParams)	{$this->reset($oParams);extract($this->oParams,EXTR_REFS)			;
		$wfb			=preg_split('/(?<!^)(?!$)/u'	,$WebSocket_frame)	;
		list($byte_0,$byte_1)	=substr(0,2			,$WebSocket_frame)	;
		$byte_0		=$wfb[0]	;	$FIN		=$byte_0&0x1	;$RSV1		=$byte_0&0x2	;$RSV2=$byte_0&0x4;$RSV3=$byte_0&0x8;$opcode=$byte_0&0xf0;
		$byte_1		=$wfb[1]	;	$MASK		=$byte_1&0x1	;$Payload_len	=$byte_1&0xFE	;
		$byte_offset	=3		;
		switch($Payload_len)
			{
		case	0x7E	://126
				list($Payload_len_extended)	=array_merge(unpack("n*",substr($WebSocket_frame,$byte_offset,2)));
				$byte_offset+=2;						break;
		case	0x7F	://127
				list($Payload_len_extended)	=array_merge(unpack("d*",substr($WebSocket_frame,$byte_offset,8)));
				$byte_offset+=8;						break;
		default		:		break;
			};	if($Payload_len_extended!==NULL	)$Payload_len_extended=$this->flipByteOrder($Payload_len_extended);

		if($MASK			){$Masking_key=substr($WebSocket_frame,$byte_offset,4);$byte_offset+=4;}
		$Payload_Data	=substr($WebSocket_frame,$byte_offset,($Payload_len_extended===NULL)?$Payload_Len:$Payload_len_extended);
//		$oParams["Payload_Data"	]="***";
		}
	}	//	class	WebSocket_08_codec


***/



/*******

array_walk(debug_backtrace(),create_function('$a,$b','print "{$a[\'function\']}()(".basename($a[\'file\']).":{$a[\'line\']}); ";'));

******/














//			$this->paramsList();//array_keys($wsActive));
//print "\nThe unpacked value is $n";
//print "\nUNWRAP: ".print_r($this->wframe,TRUE);
//$this->paramsList();
//print_r(array_keys($this->paramsActive()));
//printf('\n byte 1=%1$08b / %1$d   Byte 2=%2$08b / %2$d',$this->wframe[0]->data,$this->wframe[1]->data);
//print "\n case Payload_len_extened Payload_len=".$this->Payload_len." Payload_len_extended=".$this->Payload_len_extended;
//print "\nISO-8859-1=".((isISO_8859_1($frame))?"Yes":"No")." UTF-8=".((isUTF_8($frame))?"Yes":"No")." mb_detect=".mb_detect_encoding("ISO-8859-1,UTF-8,ASCII");
//$frame=iconv(mb_detect_encoding("ISO-8859-1,UTF-8,ASCII"),"UTF-8//IGNORE",$frame);
//if(!file_exists("websockets_frame.bin"))
//	file_put_contents("websockets_frame.bin",$frame);
//if(!file_exists("websockets_frame.bin"))//file_put_contents("websockets_frame.bin",$frame);





function uniord($c)
	{
	$h = ord($c{0});
	if	($h <=	0x7F)		{	return $h	;}
	else if	($h <	0xC2)		{	return false	;}
	else if ($h <=	0xDF)		{	return ($h & 0x1F) << 6 | (ord($c{1}) & 0x3F);    }
	else if ($h <=	0xEF)		{	return ($h & 0x0F) << 12 | (ord($c{1}) & 0x3F) << 6 | (ord($c{2}) & 0x3F);    }
	else if ($h <=	0xF4)		{	return ($h & 0x0F) << 18 | (ord($c{1}) & 0x3F) << 12 | (ord($c{2}) & 0x3F) << 6 | (ord($c{3}) & 0x3F);  }
	else				{	return false	;}
	}
foreach(Array(0x7f,0xc2,0xdf,0xef,0xf4) as $k=> $v)printf("\n%1$08b %1$0x %1$0d",$v);



function isISO_8859_1($str)
	{
return (preg_match("/^[\\x00-\\xFF]*$/u", $str) === 1);
	}

function isUTF_8($str)
	{ 
	$len = strlen($str); 
	for($i = 0; $i < $len; $i++)
		{ 
		$c = ord($str[$i]); 
	if ($c > 128) { 
	    if (($c > 247)) return false; 
	    elseif ($c > 239) $bytes = 4; 
	    elseif ($c > 223) $bytes = 3; 
	    elseif ($c > 191) $bytes = 2; 
	    else return false; 
	    if (($i + $bytes) > $len) return false; 
	    while ($bytes > 1) { 
		$i++; 
		$b = ord($str[$i]); 
		if ($b < 128 || $b > 191) return false; 
		$bytes--; 
	    } 
	} 
    } 
    return true; 
} // end of check_utf8 

//	convert a string to packed binary
//					$aPackArguments	=array_merge((array) "C*",array_map(function($c){return ord($c);},str_split($vOut)));
//					$B		=call_user_func_array("pack",$aPackArguments); 
//	print "\nB=(".print_r($B,TRUE).")";
//					if($B)	{$websocket_frame.=$B;		}
//					else	{ print "\nstring pack failed";	}

//	http://nl.php.net/manual/en/function.ord.php#78032
//	http://nl.php.net/manual/en/function.ord.php#78032



function	flipByteOrder($v	,&$binstring=NULL)
		{
		$vo=0;
		if(		$v > 65535	){	// 64bit
			$databuffer[1]	= 127;
			$lo		= 	$v | 0			;
			$hi		= (	$v - $lo) / 4294967296	;

			$databuffer[2]	= (	$hi	>> 24	)	& 255;
			$databuffer[3]	= (	$hi	>> 16	)	& 255;
			$databuffer[4]	= (	$hi	>> 8	)	& 255;
			$databuffer[5]	=  	$hi			& 255;

			$databuffer[6]	= (	$lo	>> 24	)	& 255;
			$databuffer[7]	= (	$lo	>> 16	)	& 255;
			$databuffer[8]	= (	$lo	>> 8	)	& 255;
			$databuffer[9]	=  	$lo			& 255;
		} elseif(	$v > 125	){	// 16 bit
			array_pad($databuffer, 4, 0);
			$databuffer[1]	= 126;
			$databuffer[2]	= ($v	>> 8	)	& 255;
			$databuffer[3]	= $v			& 255;
		} else {	$databuffer[1] = $v;	}


		}	//	End	Function	flipByteOrder
function	unpackDouble()
		{
		$hi = ($this->buffer[$this->bufferPos] << 24)
			+ ($this->buffer[$this->bufferPos + 1] << 16)
			+ ($this->buffer[$this->bufferPos + 2] << 8 )
			+ $this->buffer[$this->bufferPos + 3];
		$lo = ($this->buffer[$this->bufferPos + 4] << 24)
			+ ($this->buffer[$this->bufferPos + 5] << 16)
			+ ($this->buffer[$this->bufferPos + 6] << 8 )
			+ $this->buffer[$this->bufferPos + 7];
		$this->frameLength = ($hi * 4294967296) + $lo;
		}
	}	//		End	class		WebSocket_codec

//$bb="abcdef";$cc=call_user_func_array("pack",array_merge(Array("c"),str_split($bb)));





/*
iconv_set_encoding("input_encoding"	, "UTF-8");	//	Set the character encoding to "UTF-8"
iconv_set_encoding("internal_encoding"	, "UTF-8");	//	Set the character encoding to "UTF-8"
iconv_set_encoding("output_encoding"	, "UTF-8");	//	Set the character encoding to "UTF-8"
*/
/*
iconv_set_encoding("input_encoding"	, "ISO-8859-1");	//	Set the character encoding to "iso-8859-1"
iconv_set_encoding("internal_encoding"	, "ISO-8859-1");	//	Set the character encoding to "iso-8859-1"
iconv_set_encoding("output_encoding"	, "ISO-8859-1");	//	Set the character encoding to "iso-8859-1"
*/


//		$frame=utf8_decode($oParams["websocket_frame"]);$oParams["Payload_Data"]="";$Payload_Data=&$oParams["Payload_Data"];
//		file_put_contents(	"websockets_frame.bin",$this->Payload_Data);
//		chmod(			"websockets_frame.bin",766);



/*
$wsOut				=new WebSocket_codec_frame();
$wsOut->opcode			=WSF_text			;
$wsOut->MASK			=1				;
$wsOut->Payload_Data		=<<<EOL
Well now , this is starting to be truly interesting, as the code progresses from the challenges of coding to the rewards of having 
coded!!! This shows that at least messages from 0-0xffff in length appear to work.
EOL;

$wrapping			=Array()			;
$wsOut->wrap($wrapping)						;
$websocket_frameOut		=$wrapping["websocket_frame"]	;
$websocket_frameIn		=$websocket_frameOut		;
*/

//
//$websocket_frameIn		=file_get_contents("websockets_frame.bin");	;
//print "frame in len = ".strlen($websocket_frameIn)				;


//		file_put_contents("websockets_frame.bin",$this->Payload_Data);
//		chmod("websockets_frame.bin",766);




//$wsIn();

//$unwrapping			=Array("websocket_frame"=>$websocket_frameIn)	;
//$resultIn			=$wsIn->unwrap($unwrapping)			;
//$Payload_Data			=$wsIn->Payload_Data				;
//list(,$status_code)=unpack("n",$Payload_Data)					;
//$status_text	=substr(	$Payload_Data,2	);
//$L		=strlen(	$status_text	);
//printf("\r\nStatus Code= %d len %d  text=%s",$status_code,$L,$status_text);
//for($x=0;$x<$L;$x++)
//	{
//	$C=ord(substr($status_text,$x,1));
//	printf("\r\n".'(%1$d) %2$08b %2$2x %2$3d %2$c',$x,$C);
//	}
//$wsOut();
//$wsIn();

//print_r($acf);

